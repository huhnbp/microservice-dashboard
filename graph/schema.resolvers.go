package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"

	"github.com/huhnbp/microservice-dashboard/graph/model"
	svc "github.com/huhnbp/microservice-dashboard/internal/services"
)

// Services is the resolver for the services field.
func (r *queryResolver) Services(ctx context.Context) ([]*model.Service, error) {
	result := make([]*model.Service, len(svc.Services))
	for i := range svc.Services {
		svc.GetDummyMetrics(&svc.Services[i])
		result[i] = &svc.Services[i]
	}
	return result, nil
}

// Service is the resolver for the service field.
func (r *queryResolver) Service(ctx context.Context, name string) (*model.Service, error) {
	for i := range svc.Services {
		if svc.Services[i].Name == name {
			svc.GetDummyMetrics(&svc.Services[i])
			return &svc.Services[i], nil
		}
	}
	return nil, nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
